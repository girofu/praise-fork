###########################################################################
## GENERAL ##

# Running through Docker: NODE_ENV=production
NODE_ENV=production

###########################################################################
## DATABASE ##

#
# CONFIGURE A LOCAL MONGODB INSTANCE
#
# Below variables are used to configure a local MongoDB instance. If you don't
# plan to run a local MongoDB instance, you can skip this section.
#

# Running through Docker: MONGO_HOST=mongodb
# Running outside Docker: MONGO_HOST=localhost
MONGO_HOST=mongodb

# Port to expose when running MongoDB in Docker locally
MONGO_PORT=27017

# Admin user for the database. This user is used to create the database and
# user for Praise. This user is used at runtime when creating new communities
# and their databases.
MONGO_INITDB_ROOT_USERNAME=praiseDbRootUsername
MONGO_INITDB_ROOT_PASSWORD=

# User for Praise. This user is used at runtime to access the database for
# a community.
MONGO_USERNAME=praiseDbUsername
MONGO_PASSWORD=

#
# RUNTIME CONNECTION STRINGS
#
# Connection strings for the database, used at runtime. When configuring a
# local MongoDB instance, these variables as well as the variables above
# should be set to the same values.
#
# MONGO_URI must include a placeholder for the community database name, {DB}.
#
# Example connection strings, local MongoDB instance:
# MONGO_URI=mongodb://praiseDbUsername:password@localhost:27017/{DB}?authSource=admin&ssl=false
# MONGO_ADMIN_URI=mongodb://praiseDbRootUsername:password@localhost:27017/admin?authSource=admin&ssl=false
#
# Example connection strings, DigitalOcean MongoDB:
# MONGO_URI=mongodb+srv://username:password@db-mongodb-saas-xxx.mongo.ondigitalocean.com/{DB}?tls=true&authSource=admin&replicaSet=db-mongodb-saas
# MONGO_ADMIN_URI=mongodb+srv://adminusername:password@db-mongodb-saas-xxx.mongo.ondigitalocean.com/admin?tls=true&authSource=admin&replicaSet=db-mongodb-saas

MONGO_DB=praise
MONGO_URI=
MONGO_ADMIN_URI=

###########################################################################
## HOST ##

# The fully qualified domain name for the host where you are running Praise
# For development: HOST=localhost
HOST=localhost

###########################################################################
## API ##

# Full URL to the host where the API is running.
# When running in development, the URL should also include API_PORT
API_URL=

# The API is accessed on this port. In production this port is not exposed
# externally but API is accessed on {$API_URL}/api
API_PORT=8088

# Comma separated list of ethereum addresses with admnin access to the API
ADMINS=

# API authentication
JWT_SECRET=
# expires after 1 hour of inactivity, or 3 days
JWT_ACCESS_EXP=3600
JWT_REFRESH_EXP=25920000

# API keys for core services
API_KEYS=
API_KEY_ROLES=

# The API key salt is used when hashing API keys to store in the database
API_KEY_SALT=

###########################################################################
## FRONTEND ##

# Full URL to the host (and optionally port) where frontend is being served
FRONTEND_URL=

## FRONTEND - DEVELOPMENT ONLY ##

# Full URL to host where API is running. This variable is not currently used in production.
# Why? The frontend is built as a static website and cannot easily accept
# env variables. There are workarounds but we haven't prioritised to implement them yet.
#
# ℹ️ https://jakobzanker.de/blog/inject-environment-variables-into-a-react-app-docker-on-runtime/
REACT_APP_SERVER_URL=

# Port number used when running frontend for development, outside of Docker
FRONTEND_PORT=3000

# Alchemy provider API key
REACT_APP_ALCHEMY_KEY=

# WalletConnect connector API key
REACT_APP_WALLETCONNECT_PROJECT_ID=5769255b8f20aec57c1e942e57c94659

###########################################################################
## DISCORD_BOT ##

DISCORD_TOKEN=
DISCORD_CLIENT_ID=
DISCORD_GUILD_ID=

###########################################################################
## OPENAI  ##

OPENAI_KEY=
OPENAI_MODEL=gpt-3.5-turbo

###########################################################################
## LOGGING ##

# options: error, warn, info, http, debug
LOGGER_LEVEL=warn

###########################################################################
## SETUP-WEB ##
WEB_URL="https://staging.givepraise.xyz/"

###########################################################################
## PINATA IPFS ##

# API url for uploading and deleting IPFS files
PINATA_API_URL=https://api.pinata.cloud/

# Create a Pinata account and generate a JWT token
PINATA_JWT_TOKEN=

# IPFS gateway for retrieving IPFS files, please replace with your own to ensure
# images are delivered reliably.
PINATA_DEDICATED_GATEWAY=https://cloudflare-ipfs.com/ipfs/

PLAUSIBLE_DOMAIN=local-givepraise.xyz
